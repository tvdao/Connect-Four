{"version":3,"sources":["components/Cell.jsx","components/Board.jsx","gameLogic.js","ConnectFour.jsx","App.jsx","index.js"],"names":["Cell","row","col","updateBoard","player","player1","player2","className","onClick","join","Board","board","map","rowId","cell","cellId","piece","initialGrid","push","ConnectFour","useState","setBoard","winner","setWinner","setPlayer","placePiece","diagonalWin","verticalWin","horizontalWin","checkWin","App","ReactDOM","render","document","getElementById"],"mappings":"kKA6CeA,EAlBF,SAAC,GAA8C,EAA7CC,IAA8C,IAAzCC,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,YACfC,EAAS,CADyC,EAAtBC,QAEpB,UAAY,GAF8B,EAAbC,QAG7B,UAAY,IAE1B,OACI,qBAAKC,UAAU,OAAOC,QAAW,WAC7BL,EAAY,CACRD,IAAKA,KAFb,SAKI,qBAAKK,UAAU,SAAf,SACI,qBAAKA,UAAWH,EAAOK,KAAK,YCU7BC,EA3BD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOR,EAAiB,EAAjBA,YACnB,OACI,qBAAKI,UAAU,QAAf,SACKI,EAAMC,KAAI,SAACX,EAAKY,GACb,OACI,8BAEKZ,EAAIW,KAAI,SAACE,EAAMC,GACZ,OACI,cAAC,EAAD,CACIC,MAASF,EAAKE,MAEdf,IAAOY,EACPX,IAAOa,EACPZ,YAAeA,EACfE,QAA0B,IAAfS,EAAKE,MAChBV,QAA0B,IAAfQ,EAAKE,OALTD,OANbF,SCTxBI,EAAc,WAEhB,IADA,IAAIN,EAAQ,GACHV,EAAM,EAAGA,EAAM,EAAGA,IAAQ,CAC/BU,EAAMO,KAAK,IACX,IAAK,IAAIhB,EAAM,EAAGA,EAAM,EAAGA,IACvBS,EAAMV,GAAKiB,KAAK,CACZF,MAAO,EACPf,IAAKA,EACLC,IAAKA,IAIjB,OAAOS,GC6CIQ,EArDK,WAAM,MAEIC,mBAASH,GAFb,mBAEfN,EAFe,KAERU,EAFQ,OAIMD,oBAAS,GAJf,mBAIfE,EAJe,KAIPC,EAJO,OAMMH,mBAAS,GANf,mBAMfhB,EANe,KAMPoB,EANO,KAuCtB,OACI,gCACI,cAAC,EAAD,CACAb,MAASA,EACTR,YA9BY,SAAC,GAAW,IAAVD,EAAS,EAATA,KDQP,SAACS,EAAOP,EAAQF,GAC/B,IAAK,IAAID,EAAM,EAAGA,GAAO,EAAGA,IACxB,GAA8B,IAA1BU,EAAMV,GAAKC,GAAKc,MAEhB,OADAL,EAAMV,GAAKC,GAAKc,MAAQZ,GACjB,EAIf,OAAO,GCfEqB,CAAWd,EAAOP,EAAQF,MDsGtB,SAACS,EAAOP,GACrB,SAjCgB,SAACO,EAAOP,GACxB,IAAK,IAAIH,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,GAAIA,EAAM,GACFS,EAAMV,GAAKC,GAAKc,QAAUZ,GAC1BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,GAC9BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,GAC9BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,EAC1B,OAAO,EAGnB,GAAIF,EAAM,GACFS,EAAMV,GAAKC,GAAKc,QAAUZ,GAC1BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,GAC9BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,GAC9BO,EAAMV,EAAI,GAAGC,EAAI,GAAGc,QAAUZ,EAC1B,OAAO,EAK3B,OAAO,EAYHsB,CAAYf,EAAOP,IAvDP,SAACO,EAAOP,GACxB,IAAK,IAAIH,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIS,EAAMV,GAAKC,GAAKc,QAAUZ,GAC1BO,EAAMV,EAAI,GAAGC,GAAKc,QAAUZ,GAC5BO,EAAMV,EAAI,GAAGC,GAAKc,QAAUZ,GAC5BO,EAAMV,EAAI,GAAGC,GAAKc,QAAUZ,EAC5B,OAAO,EAInB,OAAO,EA6CHuB,CAAYhB,EAAOP,IA9EL,SAACO,EAAOP,GAC1B,IAAK,IAAIH,EAAM,EAAGA,GAAO,EAAGA,IAAO,CAC/B,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIS,EAAMV,GAAKC,GAAKc,QAAUZ,GAC1BO,EAAMV,GAAKC,EAAI,GAAGc,QAAUZ,GAC5BO,EAAMV,GAAKC,EAAI,GAAGc,QAAUZ,GAC5BO,EAAMV,GAAKC,EAAI,GAAGc,QAAUZ,EACxB,OAAO,EAGvB,OAAO,GAqEHwB,CAAcjB,EAAOP,ICpGjByB,CAASlB,EAAOP,GAIpBoB,EAAqB,IAAXpB,EAAe,EAAI,GAHzBmB,GAAU,OAyBV,gCACI,4BAAID,EAAS,kBAAoBlB,EAAS,gBAAkBA,IAhBpE,wBAAQI,QAAS,WACba,EAASJ,GACTO,EAAU,GACVD,GAAU,IAHd,+BCzCOO,EARH,WACR,OACI,8BACI,cAAC,EAAD,OCQZC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.81a46427.chunk.js","sourcesContent":["/**\n * Filename: Cell.jsx\n * Author: Tri Dao\n * Date: 4/22/21\n * \n * Summary of File:\n *      This file is the Cell component. It keeps track of which Cell is clicked\n * and returns that information back up to the App component. It also displays the \n * pieces on the html page if a player clicked in the Cell.\n */\n\n/**\n * Styles the Cell component as well as displays the pieces within each cell\n * \n * @param row - row of cell\n * @param col - col of cell\n * @param updateBoard - function to pass data from Cell component to App component\n *                      in order to update the board\n * @param player1 - true if player1 occupies cell\n * @param player2 - true if player2 occupies cell\n * \n * @return a div that represents the individual cell of the board and an inner div \n *         which represents the player piece\n */\nimport React from \"react\";\nimport \"./cell.css\"\n\nconst Cell = ({row, col, updateBoard, player1, player2}) => {\n    const player = [\n        player1 ? \"player1\" : \"\",\n        player2 ? \"player2\" : \"\"\n    ]\n    return (\n        <div className=\"cell\" onClick = {() => {\n            updateBoard({\n                col: col\n            })\n        }}>\n            <div className=\"circle\">\n                <div className={player.join(\" \")}></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Cell;","/**\n * Filename: Board.jsx\n * Author: Tri Dao\n * Date: 4/22/21\n * \n * Summary of File:\n *      This file is the Board component. It maps each spot of the board with\n * a Cell component, passing along data like the piece that occupies the component\n */\n\nimport React from \"react\";\nimport Cell from \"./Cell\";\n\n/**\n * Takes the current board and displays each index as a Cell component. \n * \n * @param board - current board\n * @param updatedBoard - child function for Cell component\n * \n * @return a div which encases the entire board and within this div, a cell component\n * for each spot of the board\n */\nconst Board = ({board, updateBoard}) => {\n    return (\n        <div className=\"board\">\n            {board.map((row, rowId) => {\n                return (\n                    <div key={rowId}>\n                        {/* cell is an object with props(piece, col, row) */}\n                        {row.map((cell, cellId) => {\n                            return (\n                                <Cell \n                                    piece = {cell.piece}\n                                    key = {cellId}\n                                    row = {rowId}\n                                    col = {cellId}\n                                    updateBoard = {updateBoard}\n                                    player1 = {cell.piece === 1 ? true : false}\n                                    player2 = {cell.piece === 2 ? true: false}\n                                />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Board;","/**\n * Filename: gameLogic.js\n * Author: Tri Dao\n * Date: 4/22/21\n * \n * Summary of File:\n *      This file contains functions that encompass the\n * essential functions of connect 4. Such as, checking \n * if there is a win in the valid directions, as well as \n * setting up and updating the board\n */\n\n/**\n * Creates the board, fill with Object that has information\n * of the player(piece) and the corresponding row and col\n * \n * @return inital Board\n */\nconst initialGrid = () => {\n    let board = [];\n    for (let row = 0; row < 6; row ++) {\n        board.push([]);\n        for (let col = 0; col < 7; col++) {\n            board[row].push({\n                piece: 0,\n                row: row,\n                col: col\n            })\n        }\n    }\n    return board;\n}\n\n/**\n * Place piece of specific player in the column that was clicked,\n * and update the board\n * \n * @param board - current state of the board\n * @param player - current player that will be assigned at column\n * @param col - columnb where piece will be inserted\n * \n * @return true if piece is placed, false otherwise\n */\nconst placePiece = (board, player, col) => {\n    for (let row = 5; row > -1; row--) {\n        if (board[row][col].piece === 0) {\n            board[row][col].piece = player;\n            return true;\n        }\n    }\n    // false means can not place in column\n    return false;\n}\n\n/**\n * Check horizontal win based on player\n * \n * @param board - current state of the board\n * @param player - current player\n * \n * @return true if win, false otherwise\n */\nconst horizontalWin = (board, player) => {\n    for (let row = 5; row > -1; row--) {\n        for (let col = 0; col < 4; col++) {\n            if (board[row][col].piece === player &&\n                board[row][col+1].piece === player &&\n                board[row][col+2].piece === player &&\n                board[row][col+3].piece === player) {\n                    return true;\n            }\n        }\n    return false;\n    }\n}\n\n/**\n * Check veritcal win based on player\n * \n * @param board - current state of the board\n * @param player - current player\n * \n * @return true if win, false otherwise\n */\nconst verticalWin = (board, player) => {\n    for (let row = 5; row > 2; row--) {\n        for (let col = 0; col < 7; col++) {\n            if (board[row][col].piece === player &&\n                board[row-1][col].piece === player &&\n                board[row-2][col].piece === player &&\n                board[row-3][col].piece === player) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Check diagonal win based on player\n * \n * @param board - current state of the board\n * @param player - current player\n * \n * @return true if win, false otherwise\n */\nconst diagonalWin = (board, player) => {\n    for (let row = 5; row > 2; row--) {\n        for (let col = 0; col < 7; col++) {\n            if (col < 4) {\n                if (board[row][col].piece === player &&\n                    board[row-1][col+1].piece === player &&\n                    board[row-2][col+2].piece === player &&\n                    board[row-3][col+3].piece === player) {\n                        return true;\n                    }\n            }\n            if (col > 2) {\n                if (board[row][col].piece === player &&\n                    board[row-1][col-1].piece === player &&\n                    board[row-2][col-2].piece === player &&\n                    board[row-3][col-3].piece === player) {\n                        return true;\n                    }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Checks if there is a win on the board\n * \n * @param board - current state of the board\n * @param player - current player\n * \n * @return true if win, false otherwise\n */\nconst checkWin = (board, player) => {\n    if (diagonalWin(board, player) || \n        verticalWin(board, player) || \n        horizontalWin(board, player)) {\n            return true;\n    }\n    return false;\n}\n\nexport {initialGrid, checkWin, placePiece};","/**\n * Filename: App.jsx\n * Author: Tri Dao\n * Date: 4/28/21\n * \n * Summary of File:\n *      This file is the connectFour component. It keeps track of the current board,\n * player, and if there is a winner. This component is the parent component\n * of Board. \n */\n\nimport React, {useState} from \"react\";\nimport Board from \"./components/Board\";\nimport {initialGrid, checkWin, placePiece} from \"./gameLogic\"\n\n/**\n * Displays the board and text. Handles the dynamically changes\n * of the board\n * \n * @return Board component that contains the board of the game and \n * a resetGame button\n */\nconst ConnectFour = () => {\n    // Keeps track of board state\n    const [board, setBoard] = useState(initialGrid);\n    // Keeps track if win\n    const [winner, setWinner] = useState(false);\n    // Keeps track of current Player\n    const [player, setPlayer] = useState(1);\n    \n    /** \n     * Updates the board by keeping track of players and pieces\n     * \n     * @param col - Column where piece will be placed\n     */\n    const updateBoard = ({col}) => {\n        if (!placePiece(board, player, col)) {\n            // Column is filled, can't place piece\n            return;\n        }\n        // If win\n        if (checkWin(board, player)) {\n            setWinner(true);\n            return;\n        }\n        setPlayer(player === 1 ? 2 : 1);\n    }\n\n    /** \n     * Clears the board, sets player to 1 and winner to false\n     */\n    const resetGame = () => (\n        <button onClick={() => {\n            setBoard(initialGrid);\n            setPlayer(1);\n            setWinner(false);\n        }}>\n            Reset Game\n        </button>\n    )\n\n    return (\n        <div>\n            <Board \n            board = {board}\n            updateBoard = {updateBoard}\n            />\n            <div>\n                <p>{winner ? \"Winner: Player \" + player : \"Next Player: \" + player }</p>\n                {resetGame()}\n            </div>\n        </div>\n    )\n}\n\nexport default ConnectFour;","import React from \"react\";\nimport ConnectFour from \"./ConnectFour\";\n\nconst App = () => {\n    return (\n        <div>\n            <ConnectFour />\n        </div>\n    )\n}\n\nexport default App;","/**\n * Filename: index.js\n * Author: Tri Dao\n * Date: 4/22/21\n * \n * Summary of File:\n *      Renders the App component, and displays the component\n * on the html page.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}